[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Projects",
    "section": "",
    "text": "Diabetes Classification Model: Virtual Environment through Docker\n\n\n\nML Projects\n\n\n\nBuilding a Diabetes Classification Model: Leveraging Docker for Efficient Environment Management.\n\n\n\nSharon Voon\n\n\nFeb 9, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sharon Voon",
    "section": "",
    "text": "Hello~\nI am Sharon Voon, a dedicated Master of Data Science student at the University of British Columbia. Passionate about data modelling and machine learning, I find joy in tackling challenging tasks that push the boundaries of my knowledge. With my degree in Chemical and Biological Engineering, I bring a unique blend of analytical thinking and engineering background to the field of data science. Outside of my academic pursuits, I love immersing myself in the beauty of nature through short hikes and find solace in the world of music and gaming. Let’s connect and explore opportunities to collaborate!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello~ Welcome to this page about me. I am currently a MDS student in the cohort 8 .This page will be updated as I learn more interesting stuff in this program."
  },
  {
    "objectID": "posts/diabetes_classification/index.html",
    "href": "posts/diabetes_classification/index.html",
    "title": "Diabetes Classification Model: Virtual Environment through Docker",
    "section": "",
    "text": "Embark on a journey with me as I share insights into creating a predictive diabetes classification model. Learn how to streamline your workflow by hosting a virtual environment using Docker, ensuring seamless software dependency management. Drawing from a group project during my MDS studies, where we explored decision tree and kNN algorithms with the 2015 BFRSS dataset, I’ll guide you through the process of developing scripts and analysis pipeline for non-interactive data analysis. While I won’t delve into the projects findings here, you can explore the complete source code and report here."
  },
  {
    "objectID": "posts/diabetes_classification/index.html#introduction",
    "href": "posts/diabetes_classification/index.html#introduction",
    "title": "Diabetes Classification Model: Virtual Environment through Docker",
    "section": "",
    "text": "Embark on a journey with me as I share insights into creating a predictive diabetes classification model. Learn how to streamline your workflow by hosting a virtual environment using Docker, ensuring seamless software dependency management. Drawing from a group project during my MDS studies, where we explored decision tree and kNN algorithms with the 2015 BFRSS dataset, I’ll guide you through the process of developing scripts and analysis pipeline for non-interactive data analysis. While I won’t delve into the projects findings here, you can explore the complete source code and report here."
  },
  {
    "objectID": "posts/diabetes_classification/index.html#demystifying-docker-a-high-level-introduction-to-containerization",
    "href": "posts/diabetes_classification/index.html#demystifying-docker-a-high-level-introduction-to-containerization",
    "title": "Diabetes Classification Model: Virtual Environment through Docker",
    "section": "Demystifying Docker: A High-Level Introduction to Containerization",
    "text": "Demystifying Docker: A High-Level Introduction to Containerization\n\n\n\nWhat is Conatinerization?\n\n\nContainers serve as a power solution for creating isolated computational environments. Distinct from virtual environments, they offer enhances isolation from the host operating system and provide a versatile platform for sharing various software, applications, and operating system dependencies. One of the most prevalent questions that often arises is: What is Docker, and why choose Docker?\nDocker, as a containerization software, is a platform meticulously crafted to empower developers in constructing, sharing, and executing container applications, thereby eliminating the hassles associated with intricate environment setups. We’ve all been through the common yet exasperating scenario in collaborative projects: ‘It works on my end. I am not sure why it isn’t working on your laptop.’\nDocker serves as a solution to this issue by allevating the burden of meticulous environment configuration and management. Furthermore, it seamlessly integrates with your existing tools, such as your GitHub repository, offering a consistent and reliable approach to containerized applications."
  },
  {
    "objectID": "posts/diabetes_classification/index.html#installing-docker",
    "href": "posts/diabetes_classification/index.html#installing-docker",
    "title": "Diabetes Classification Model: Virtual Environment through Docker",
    "section": "Installing Docker",
    "text": "Installing Docker\n\nTo get started, create a free Docker account here.\nOnce you have signed up and logged into Docket store, proceed to install Docker for your operating system. You can find the installtion instructions for windows here. Follow the steps outlines on the official page for a seamless installation experience."
  },
  {
    "objectID": "posts/diabetes_classification/index.html#quick-tutorial-running-a-simple-container-example",
    "href": "posts/diabetes_classification/index.html#quick-tutorial-running-a-simple-container-example",
    "title": "Diabetes Classification Model: Virtual Environment through Docker",
    "section": "Quick Tutorial: Running a Simple Container Example",
    "text": "Quick Tutorial: Running a Simple Container Example\nOne of the many benefits of container is their ability to provide a platform for sharing various software. Here we will utilize Docker to run a container containing the RStudio server web-application. Ensure that you are signed into your Docker Desktop before proceeding.\ndocker run --rm -p 8787:8787 -e PASSWORD=\"yourpassword\" rocker/rstudio:4.3.2\n\nBreakdown of the command\n\nThe -p flag informs Docker that a port will be used to access RStudio in your web browser, with the specified location as 8787:8787.\nThe -rm option ensures that when you exit the container, it is automatically deleted, preventing manual removal and saving disk space.\nThe -e flag is used to set environment variables within the container. Environment variables are key-value pairs that can be passed to a Docker container providing a way to configure the containerized application or modify its behaviour based on these varibles. -e PASSWORD=\"yourpassword\" sets the password for logging into the RStudio web app as ‘yourpassword’.\n\nIf this is your first time running this Docker container, Docker will automatically search for the container on DockerHub (equivalent to GitHub but for Docker images) and download it if it exists. The specified version 4.3.2, indicates the specific RStudio version to download from DockerHub.\nYou can now access your local web app at http:\\\\localhost:8787. Log into RStudio web app using: ‘rstudio’ as the username and ‘yourpassword’ as the password."
  },
  {
    "objectID": "posts/diabetes_classification/index.html#building-the-docker-image-from-a-widely-used-dockerhub-container-registry",
    "href": "posts/diabetes_classification/index.html#building-the-docker-image-from-a-widely-used-dockerhub-container-registry",
    "title": "Diabetes Classification Model: Virtual Environment through Docker",
    "section": "Building the Docker Image from a Widely-Used DockerHub Container Registry",
    "text": "Building the Docker Image from a Widely-Used DockerHub Container Registry\nA container registry serves as a remote repository or collection of repositories for sharing container images. Notable container registries include DockerHub, Quay, AWS, and more. In this tutorial, we will focus on DockerHub.\nIt is a common and recommended practice to construct a container image tailored to your project atop a base container image. Utilizing a base image ensures a clean and reproducible environment, facilitating effective dependency management. The advantages extend beyond consistensy, efficiency, reproducibility, and security.\nFor our group project, coded in Python Language, we opted for a Jupyter minimal-notebook image from quay.io, equipped with ipykernel, ipython, and jupyterLab for a dynamic notebook experience. To integrate this base image, a DockerFile is required. A Dockerfile serves as a script guiding the creation of a Docker image offering instructions for Docker to follow in building a container image specific to an application or service. The primary purposes of a Dockerfile are to define the base image and install specific dependencies. It is advisable to specify version numbvers for dependencies to prevent potential clashes in the future.\n\n\n\nDockerfile\n\n\n\nBreakdown of the Dockerfile\nOur Dockerfile is structured as follows:\nFROM quay.io/jupyter/minimal-notebook:2023-11-19\n\n# base image comes with ipykernel, ipython, jupyterLab\n\nRUN conda install -y pandas=2.1.3 \\\n    altair=5.1.2 \\\n    scikit-learn=1.3.2 \\\n    vegafusion=1.4.5 \\\n    vegafusion-python-embed \\\n    click=8.1.7 \\\n    jupyter-book=0.15.1 \\\n    make=4.3\n\nRUN pip install vl-convert-python==1.1.0 \\\n    pytest==7.4.3 \\\n    ucimlrepo==0.0.3 \\\n    myst-nb==0.17.2\nA typical Dockerfile commences with a FROM command, specifying the base image upon which the new image will be built off. Docker images are constructed in layers to maintain a lightweight profile. The subsequent RUN commands install new software or execute configuration commands. To enhance redability and organization, the installation process is segmented based on the channels from which dependencies are sourced. In this instance, dependencies installed through conda are grouped together, while those installed via pip are managed separately. The -y flag is essential for the conda command, requiring approval of dependencies before installation when using the conda channel.\nTo ensure the Dockerfile functions as intended, we verify its functionality by building the image locally. Run the following command from the directory where the Dockerfile is situated:\ndocker build --tag diabetes_classification:v1 .\ndocker run --rm -it diabetes_classification:v1\n\nThe --tag flag designates the name of the Docker Image. Here, it is set to ‘test1’ with a version number of ‘v1’\nThe . denotes the current working directory, indicating that the Dockerfile is located in the same directory where the command is executed\n\nPress Ctrl + C to shut down this jupyter notebook."
  },
  {
    "objectID": "posts/diabetes_classification/index.html#launching-docker-image-in-a-container",
    "href": "posts/diabetes_classification/index.html#launching-docker-image-in-a-container",
    "title": "Diabetes Classification Model: Virtual Environment through Docker",
    "section": "Launching Docker Image in a container",
    "text": "Launching Docker Image in a container\nLaunching the image as a container typically involves using the docker run command. However, this command can become complex with multiple flags for environment configuration, making it error-prone. To simplify this process and enhance managemability, the docker-compose.yml file is employed to define how the container should be launched.\nTo initiate the container interactively using the docker-compose.yml file, execute the following command: docker-compose up. This ensures a streamlined and error-resistant approach to container deployment.\n\nBreakdown of the YAML file\nOur docker-compose.yml is structured as follows:\nservices:\n  jupyter:\n    image:  diabetes_classification:v1\n    volumes:\n      - .:/home/jovyan\n    ports:\n      - 8888:8888\n    deploy:\n      resources:\n        limits:\n          memory: 5G\n    platform: linux/amd64\n\nservices: This section defines the services that compose our application.\njupyter: This is the name of our service, representing a Jupyter container.\nimage: diabetes_classification:v1: Specifies the Docker image to use for the jupyter service. It’s tagged as version v1.\nvolumes: Defines the volume mount between the host machine and the container. .-/home/jovyan mounts the current directory (.) to the /home/jovyan directory inside the container. This allows data to be shared between the host and the Jupyter container.\nports: Maps the host machine’s port to the container’s port. 8888:8888 maps port 8888 on the host to port 8888 in the Jupyter container.\ndeploy: Provides additional deployment options for the service.\nresources: Specifies resource limits for the service.\nlimits:: Sets limits on resource usage.\nmemory: 5G: Limits the memory usage of the jupyter service to 5 gigabytes.\nplatform: linux/amd64: Specifies the platform for which the image is built. In this case, it’s configured for the Linux AMD64 architecture.\n\nTo host the container, use the follwing command from the directory where the Dockerfile and docker-compose.yml are situated:\ndocker-compose up\nPress Ctrl + C to gracefully shut down this jupyter notebook.\nCongratulations! You have successfully built a DockerImage and launched it in an isolated container tailored for your specific project."
  },
  {
    "objectID": "posts/diabetes_classification/index.html#sharing-the-docker-image",
    "href": "posts/diabetes_classification/index.html#sharing-the-docker-image",
    "title": "Diabetes Classification Model: Virtual Environment through Docker",
    "section": "Sharing the Docker Image",
    "text": "Sharing the Docker Image\n\n\n\nDockerHub\n\n\nSharing your virtual environment can be done in two ways:\n\nShare the Dockerfile and the docker-compose.yml files with others, allowing them to rerun the same commands above.\nA generally preferred method is to push your image to DockerHub where others can effortlessly download it through DockerHub, similar to how you obtained the base image. To do so, you would need to sign up for a DockerHub account here.\n\n\nPushing the Docker Image to DockerHub:\n\nTag Your Image:\n\n\nBefore pushing your image, tag it with your DockerHub username and the desired repository name.\n\ndocker tag diabetes_classification:dockerhub_username/repository_name:v1\n\nLogin to Docker Hub: -The following command will prompt you to enter your Docker Hub username and password.\n\ndocker login\n\nPush the image to your DockerHub repository using the same tag name in Step 1.\n\ndocker push  dockerhub_username/repository_name:v1\n\nVerify that the image has been successfully pushed by checking the DockerHub website.\nOthers can now download the Docker image through the following command:\n\ndocker run --rm -it dockerhub_username/repository_name:v1\nThis streamlined process ensures seamless sharing and replication of your Docker Image, enhancing collaboration in your project."
  },
  {
    "objectID": "posts/diabetes_classification/index.html#conclusion",
    "href": "posts/diabetes_classification/index.html#conclusion",
    "title": "Diabetes Classification Model: Virtual Environment through Docker",
    "section": "Conclusion",
    "text": "Conclusion\nIn conclusion, this tutorial has guided you through the process of building and disseminating a virtual environment tailored for a predictive diabetes classification model using Docker. The utilization of Docker for environment management ensures reproducibility and eridicate compatibility concerns. Whether sharing the Dockerfile and docker-compose.yml for others to replicate the environment or pushing the image to DockerHub for convenient access, these practices enhance collaboration and streamline the deployment of your specific project. Embrace the efficiency and consistency that Docker provides, empowering your data science endeavors with a robust and shareable containerized solution.\nAdditionally, it’s worth nothing that in this project, we implemented a GitHub workflow to automate the building and pushing of updated Dockerfile to our DockerHub which is not covered in this tutorial. This further streamline the process, reinforcing the central concept."
  },
  {
    "objectID": "posts/diabetes_classification/index.html#github-source-code",
    "href": "posts/diabetes_classification/index.html#github-source-code",
    "title": "Diabetes Classification Model: Virtual Environment through Docker",
    "section": "GitHub Source Code",
    "text": "GitHub Source Code\nGitHub repository"
  },
  {
    "objectID": "posts/diabetes_classification/index.html#diabetes-model-report",
    "href": "posts/diabetes_classification/index.html#diabetes-model-report",
    "title": "Diabetes Classification Model: Virtual Environment through Docker",
    "section": "Diabetes model Report",
    "text": "Diabetes model Report\nAnalysis Report"
  }
]